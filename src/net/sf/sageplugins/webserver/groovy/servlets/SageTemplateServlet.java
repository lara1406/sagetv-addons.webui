/*
*      Copyright 2011 Battams, Derek
*
*       Licensed under the Apache License, Version 2.0 (the "License");
*       you may not use this file except in compliance with the License.
*       You may obtain a copy of the License at
*
*          http://www.apache.org/licenses/LICENSE-2.0
*
*       Unless required by applicable law or agreed to in writing, software
*       distributed under the License is distributed on an "AS IS" BASIS,
*       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*       See the License for the specific language governing permissions and
*       limitations under the License.
*/
package net.sf.sageplugins.webserver.groovy.servlets;

import groovy.servlet.ServletBinding;
import groovy.servlet.TemplateServlet;
import groovy.text.Template;

import java.io.File;
import java.io.IOException;
import java.io.Writer;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import sagex.api.Global;

public final class SageTemplateServlet extends TemplateServlet {
	static private final long serialVersionUID = 1L;

	// Majority borrowed from Groovy 1.8.4 src; slight mods to support purpose
	@Override
	public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        if (verbose) {
            log("Creating/getting cached template...");
        }

        //
        // Get the template source file handle.
        //
        File file = super.getScriptUriAsFile(request);
        String name = file.getName();
        if (!file.exists()) {
        	String basePath = servletContext.getRealPath("/");
       		file = new File(ServletHelpers.SCRIPT_DIR, file.getAbsolutePath().startsWith(basePath) ? file.getAbsolutePath().substring(basePath.length()) : file.toString());
       		Global.DebugLog("GSP looking for '" + file.getAbsolutePath() + "'");
       		if(!file.exists()) {
       			response.sendError(HttpServletResponse.SC_NOT_FOUND);
       			return; // throw new IOException(file.getAbsolutePath());
       		}
        }
        if (!file.canRead()) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Can not read \"" + name + "\"!");
            return; // throw new IOException(file.getAbsolutePath());
        }

        //
        // Get the requested template.
        //
        long getMillis = System.currentTimeMillis();
        Template template = getTemplate(file);
        getMillis = System.currentTimeMillis() - getMillis;

        //
        // Create new binding for the current request.
        //
        ServletBinding binding = new ServletBinding(request, response, servletContext);
        setVariables(binding);

        //
        // Prepare the response buffer content type _before_ getting the writer.
        // and set status code to ok
        //
        response.setContentType(CONTENT_TYPE_TEXT_HTML + "; charset=" + encoding);
        response.setStatus(HttpServletResponse.SC_OK);

        //
        // Get the output stream writer from the binding.
        //
        Writer out = (Writer) binding.getVariable("out");
        if (out == null) {
            out = response.getWriter();
        }

        //
        // Evaluate the template.
        //
        if (verbose) {
            log("Making template \"" + name + "\"...");
        }
        // String made = template.make(binding.getVariables()).toString();
        // log(" = " + made);
        long makeMillis = System.currentTimeMillis();
        template.make(binding.getVariables()).writeTo(out);
        makeMillis = System.currentTimeMillis() - makeMillis;

        StringBuffer sb = new StringBuffer(100);
        sb.append("\n<!-- Generated by Groovy TemplateServlet [create/get=");
        sb.append(Long.toString(getMillis));
        sb.append(" ms, make=");
        sb.append(Long.toString(makeMillis));
        sb.append(" ms] -->\n");
        out.write(sb.toString());

        //
        // flush the response buffer.
        //
        response.flushBuffer();

        if (verbose) {
            log("Template \"" + name + "\" request responded. [create/get=" + getMillis + " ms, make=" + makeMillis + " ms]");
        }

    }
}
